(self.webpackChunk=self.webpackChunk||[]).push([[189],{8455:(n,s,a)=>{"use strict";a.r(s),a.d(s,{data:()=>p});const p={key:"v-11406ee3",path:"/easy/two-sum.html",title:"两数之和",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"题目",slug:"题目",children:[]},{level:2,title:"解法一",slug:"解法一",children:[]},{level:2,title:"解法二",slug:"解法二",children:[]}],filePathRelative:"easy/two-sum.md",git:{updatedTime:1624877285e3,contributors:[]}}},1408:(n,s,a)=>{"use strict";a.r(s),a.d(s,{default:()=>t});const p=(0,a(6252).uE)('<h1 id="两数之和"><a class="header-anchor" href="#两数之和">#</a> 两数之和</h1><p>难度：1/10</p><p>类型：数组</p><h2 id="题目"><a class="header-anchor" href="#题目">#</a> 题目</h2><p>给定一个整数数组 nums 和一个整数目标值 target，请你在该数组中找出 和为目标值 target 的那 两个 整数，并返回它们的数组下标。</p><p>示例 1：</p><blockquote><p>输入：nums = [2,7,11,15], target = 9</p><p>输出：[0,1]</p><p>解释：因为 nums[0] + nums[1] == 9 ，返回 [0, 1] 。</p></blockquote><p>示例 2：</p><blockquote><p>输入：nums = [3,2,4], target = 6</p><p>输出：[1,2]</p></blockquote><p>示例 3：</p><blockquote><p>输入：nums = [3,3], target = 6</p><p>输出：[0,1]</p></blockquote><h2 id="解法一"><a class="header-anchor" href="#解法一">#</a> 解法一</h2><p>暴力循环，两层 for 循环</p><p>时间复杂度：O(n^2)</p><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code><span class="token comment">// 方法一</span>\n<span class="token keyword">func</span> <span class="token function">twoSum1</span><span class="token punctuation">(</span>nums <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> target <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>result <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>\n\t\t<span class="token keyword">for</span> j <span class="token operator">:=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span> j<span class="token operator">++</span> <span class="token punctuation">{</span>\n\t\t\t<span class="token keyword">if</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span>nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> target <span class="token punctuation">{</span>\n\t\t\t\tresult <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> i<span class="token punctuation">,</span> j<span class="token punctuation">)</span>\n\t\t\t\t<span class="token keyword">return</span>\n\t\t\t<span class="token punctuation">}</span>\n\t\t<span class="token punctuation">}</span>\n\t<span class="token punctuation">}</span>\n\t<span class="token keyword">return</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h2 id="解法二"><a class="header-anchor" href="#解法二">#</a> 解法二</h2><p>利用 map 的特性</p><p>时间复杂度：O(n)</p><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code><span class="token comment">// 方法二</span>\n<span class="token keyword">func</span> <span class="token function">twoSum2</span><span class="token punctuation">(</span>nums <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> target <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span> <span class="token punctuation">{</span>\n\tnumMap <span class="token operator">:=</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token punctuation">}</span>\n\t<span class="token keyword">for</span> key<span class="token punctuation">,</span> value <span class="token operator">:=</span> <span class="token keyword">range</span> nums <span class="token punctuation">{</span>\n\t\t<span class="token keyword">if</span> k<span class="token punctuation">,</span> ok <span class="token operator">:=</span> numMap<span class="token punctuation">[</span>target<span class="token operator">-</span>value<span class="token punctuation">]</span><span class="token punctuation">;</span> ok <span class="token punctuation">{</span>\n\t\t\t<span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span>k<span class="token punctuation">,</span> key<span class="token punctuation">}</span>\n\t\t<span class="token punctuation">}</span>\n\t\tnumMap<span class="token punctuation">[</span>value<span class="token punctuation">]</span> <span class="token operator">=</span> key\n\t<span class="token punctuation">}</span>\n\t<span class="token keyword">return</span> <span class="token boolean">nil</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><blockquote><p>来源：力扣（LeetCode） 链接：https://leetcode-cn.com/problems/two-sum 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p></blockquote>',20),t={render:function(n,s){return p}}}}]);