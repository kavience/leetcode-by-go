(self.webpackChunk=self.webpackChunk||[]).push([[850],{882:(n,s,a)=>{"use strict";a.r(s),a.d(s,{data:()=>p});const p={key:"v-b990771c",path:"/easy/remove-element.html",title:"移除元素",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"题目",slug:"题目",children:[]},{level:2,title:"解法",slug:"解法",children:[]}],filePathRelative:"easy/remove-element.md",git:{updatedTime:1624877285e3,contributors:[]}}},374:(n,s,a)=>{"use strict";a.r(s),a.d(s,{default:()=>t});const p=(0,a(6252).uE)('<h1 id="移除元素"><a class="header-anchor" href="#移除元素">#</a> 移除元素</h1><p>难度：1/10</p><p>类型：数组</p><h2 id="题目"><a class="header-anchor" href="#题目">#</a> 题目</h2><p>给你一个数组 nums 和一个值 val，你需要 原地 移除所有数值等于 val 的元素，并返回移除后数组的新长度。</p><p>不要使用额外的数组空间，你必须仅使用 O(1) 额外空间并 原地 修改输入数组。</p><p>元素的顺序可以改变。你不需要考虑数组中超出新长度后面的元素。</p><p>示例 1：</p><blockquote><p>输入：nums = [3,2,2,3], val = 3</p><p>输出：2, nums = [2,2]</p><p>解释：函数应该返回新的长度 2, 并且 nums 中的前两个元素均为 2。你不需要考虑数组中超出新长度后面的元素。例如，函数返回的新长度为 2 ，而 nums = [2,2,3,3] 或 nums = [2,2,0,0]，也会被视作正确答案。</p></blockquote><p>示例 2：</p><blockquote><p>输入：nums = [0,1,2,2,3,0,4,2], val = 2</p><p>输出：5, nums = [0,1,4,0,3]</p><p>解释：函数应该返回新的长度 5, 并且 nums 中的前五个元素为 0, 1, 3, 0, 4。注意这五个元素可为任意顺序。你不需要考虑数组中超出新长度后面的元素。</p></blockquote><h2 id="解法"><a class="header-anchor" href="#解法">#</a> 解法</h2><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">removeElement</span><span class="token punctuation">(</span>nums <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> val <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>\n\t<span class="token keyword">var</span> <span class="token punctuation">(</span>\n\t\ti <span class="token operator">=</span> <span class="token number">0</span>\n\t\tj <span class="token operator">=</span> <span class="token number">0</span>\n\t<span class="token punctuation">)</span>\n\t<span class="token keyword">for</span> i <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t<span class="token keyword">if</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> val <span class="token punctuation">{</span>\n\t\t\tnums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span>\n\t\t\tj<span class="token operator">++</span>\n\t\t<span class="token punctuation">}</span>\n\t\ti<span class="token operator">++</span>\n\t<span class="token punctuation">}</span>\n\t<span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token punctuation">{</span>\n\t\tnums <span class="token operator">=</span> nums<span class="token punctuation">[</span><span class="token punctuation">:</span>j<span class="token punctuation">]</span>\n\t<span class="token punctuation">}</span>\n\t<span class="token keyword">return</span> <span class="token function">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><blockquote><p>来源：力扣（LeetCode） 链接：https://leetcode-cn.com/problems/remove-element 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p></blockquote>',14),t={render:function(n,s){return p}}}}]);