(self.webpackChunk=self.webpackChunk||[]).push([[261],{3394:(n,s,a)=>{"use strict";a.r(s),a.d(s,{data:()=>p});const p={key:"v-e4e5b2a6",path:"/easy/search-insert-position.html",title:"搜索插入位置",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"题目",slug:"题目",children:[]},{level:2,title:"解法",slug:"解法",children:[]}],filePathRelative:"easy/search-insert-position.md",git:{updatedTime:1624877285e3,contributors:[]}}},6306:(n,s,a)=>{"use strict";a.r(s),a.d(s,{default:()=>t});const p=(0,a(6252).uE)('<h1 id="搜索插入位置"><a class="header-anchor" href="#搜索插入位置">#</a> 搜索插入位置</h1><p>难度：1/10</p><p>类型：数组</p><h2 id="题目"><a class="header-anchor" href="#题目">#</a> 题目</h2><p>给定一个排序数组和一个目标值，在数组中找到目标值，并返回其索引。如果目标值不存在于数组中，返回它将会被按顺序插入的位置。</p><p>你可以假设数组中无重复元素。</p><p>示例 1:</p><blockquote><p>输入: [1,3,5,6], 5</p><p>输出: 2</p></blockquote><p>示例 2:</p><blockquote><p>输入: [1,3,5,6], 2</p><p>输出: 1</p></blockquote><p>示例 3:</p><blockquote><p>输入: [1,3,5,6], 7</p><p>输出: 4</p></blockquote><h2 id="解法"><a class="header-anchor" href="#解法">#</a> 解法</h2><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">searchInsert</span><span class="token punctuation">(</span>nums <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> target <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>\n\t<span class="token keyword">if</span> target <span class="token operator">&lt;</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>\n\t\t<span class="token keyword">return</span> <span class="token number">0</span>\n\t<span class="token punctuation">}</span>\n\t<span class="token keyword">if</span> target <span class="token operator">&gt;</span> nums<span class="token punctuation">[</span><span class="token function">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>\n\t\t<span class="token keyword">return</span> <span class="token function">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span>\n\t<span class="token punctuation">}</span>\n\t<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>\n\t\t<span class="token keyword">if</span> target <span class="token operator">==</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token punctuation">{</span>\n\t\t\t<span class="token keyword">return</span> i\n\t\t<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n\t\t\t<span class="token keyword">if</span> target <span class="token operator">&gt;</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> target <span class="token operator">&lt;</span> nums<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>\n\t\t\t\t<span class="token keyword">return</span> i <span class="token operator">+</span> <span class="token number">1</span>\n\t\t\t<span class="token punctuation">}</span>\n\t\t<span class="token punctuation">}</span>\n\t<span class="token punctuation">}</span>\n\t<span class="token keyword">return</span> <span class="token number">0</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><blockquote><p>来源：力扣（LeetCode） 链接：https://leetcode-cn.com/problems/search-insert-position 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p></blockquote>',15),t={render:function(n,s){return p}}}}]);